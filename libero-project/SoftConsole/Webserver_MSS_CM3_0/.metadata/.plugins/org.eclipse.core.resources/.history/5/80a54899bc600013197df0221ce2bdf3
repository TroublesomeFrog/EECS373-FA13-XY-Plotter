
#include "plotter_platform.h"

/* Plotter Memory Mapped IO
 * ========================================================================= */
volatile uint16_t *numStepsX 					= (uint16_t *)(0x40050200U);
volatile uint32_t *periodX 						= (uint32_t *)(PLOTTER_BASE_ADDR + 4);
volatile uint16_t *numStepsY 					= (uint16_t *)(PLOTTER_BASE_ADDR + 8);
volatile uint32_t *periodY 						= (uint32_t *)(PLOTTER_BASE_ADDR + 12);
volatile uint16_t *GO 							= (uint16_t *)(PLOTTER_BASE_ADDR + 16);
volatile uint16_t *globalPositionX 				= (uint16_t *)(PLOTTER_BASE_ADDR + 20);
volatile uint16_t *globalPositionY 				= (uint16_t *)(PLOTTER_BASE_ADDR + 24);
volatile uint16_t *finishedGlobalPositionX 		= (uint16_t *)(PLOTTER_BASE_ADDR + 28);
volatile uint16_t *finishedGlobalPositionY 		= (uint16_t *)(PLOTTER_BASE_ADDR + 32);
volatile uint32_t *penWrite 					= (uint32_t *)(PLOTTER_BASE_ADDR + 36);


#ifdef ACTEL_STDIO_THRU_UART

UART_instance_t g_lcd_uart;
int g_lcd_uart_init_done = 0;

void _to_lcd_uart(char *ptr, int len ) {
	if( !g_lcd_uart_init_done ) {
		UART_init(&g_lcd_uart, LCD_UART_ADDR, BAUD_VALUE_9600, (DATA_8_BITS | NO_PARITY));
		g_lcd_uart_init_done = 1;
	}

	// default commands to clear the screen + print text at the origin (ie: starting at the top left corner)
    unsigned char cmds[6] = {254, 1, 254, 128, 254, 1};

    // temporary buffers to write text
    char * tmp;
    tmp = (char*) malloc (len + 7);
    memcpy(tmp, cmds, 6);
    memcpy(tmp + 6, ptr, len);
    tmp[len + 6] = '\0';

    UART_polled_tx_string(&g_lcd_uart, (uint8_t *)tmp);

    free(tmp);
}

#endif	/* ACTEL_STDIO_THRU_UART */
